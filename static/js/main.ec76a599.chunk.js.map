{"version":3,"sources":["lib/make10/src/combination.ts","lib/make10/src/rpn.ts","lib/make10/src/index.ts","components/Answer.tsx","components/DigitChanger.tsx","components/Input.tsx","App.tsx","index.tsx"],"names":["reduceDigits","nums","sep","rpnOperates","a","b","result","num","flags","i","j","list","Array","fill","push","nC2","length","operate","trues","filter","falses","rpn","eval2","operator","calculate","fourDigitsNum","Error","combs","map","comb","flat","ans","from","Set","allCombinations","stack","operators","split","str","includes","pop","undefined","Number","parseInt","calculateRpn","TOLERANCE","Math","abs","slice","rpn2infix","Answer","inputs","isXS","answers","List","sx","textAlign","maxHeight","overflow","subheader","ListSubheader","answer","ListItem","ListItemText","primary","px","NoAnswer","Box","margin","fontFamily","DigitDecrement","setInputs","IconButton","onClick","size","fontSize","color","DigitIncrement","Input","handleChange","digit","e","val","currentTarget","value","newInputs","width","display","justifyContent","gap","_","TextField","type","onChange","bind","autoFocus","inputProps","style","className","App","useState","useMediaQuery","Container","m","p","Typography","align","Grid","container","alignItems","Card","boxShadow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec76a599.chunk.js","sourcesContent":["/**\n * @description nC2 の，選ばれる組み合わせを true，それ以外を false として返す\n * @param nC2のn\n * @returns [[true,true,false],[true,false,true],[false,true,true]]\n */\nconst nC2: (num: number) => boolean[][] = (num) => {\n  let flags: boolean[][] = [];\n\n  for (let i = 0; i < num - 1; i++) {\n    for (let j = i + 1; j < num; j++) {\n      const list = new Array(num).fill(false);\n      list[i] = list[j] = true;\n      flags.push(list);\n    }\n  }\n\n  return flags;\n};\n\n/**\n * @description n 個の数字から 2 つ選んで n-1 個の数字に\n * @param [\"1\",\"2\",\"3\"]\n * @returns [[\"1 2 + \",\"3\"],[\"1 2 - \",\"3\"],...]\n */\nconst reduceDigits: (nums: string[]) => string[][] = (nums) => {\n  const sep = \" \";\n  const rpnOperates = [\n    (a: string, b: string) => a + sep + b + sep + \"+\",\n    (a: string, b: string) => a + sep + b + sep + \"-\",\n    (a: string, b: string) => b + sep + a + sep + \"-\",\n    (a: string, b: string) => a + sep + b + sep + \"*\",\n    (a: string, b: string) => a + sep + b + sep + \"/\",\n    (a: string, b: string) => b + sep + a + sep + \"/\",\n  ];\n\n  const result: string[][] = [];\n\n  for (const flags of nC2(nums.length)) {\n    for (const operate of rpnOperates) {\n      const trues = nums.filter((num, i) => flags[i]);\n      const falses = nums.filter((num, i) => !flags[i]);\n\n      const rpn = operate(trues[0], trues[1]);\n\n      result.push([rpn, ...falses]);\n    }\n  }\n  return result;\n};\n\n/**\n * @description 演算の全ての組み合わせを RPN で返す\n * @param [\"1\",\"2\",\"3\",\"4\"]\n * @returns [\"1 2 + 3 + 4 +\", ...]\n */\nexport const allCombinations: (nums: string[]) => string[] = (nums) => {\n  let combs = reduceDigits(nums);\n\n  for (let i = 0; i < nums.length - 2; i++) {\n    combs = combs.map((comb) => reduceDigits(comb)).flat();\n  }\n\n  const ans = combs.flat();\n\n  // 重複削除\n  return Array.from(new Set<string>(ans));\n};\n","const eval2: (a: number, operator: string, b: number) => number | undefined = (a, operator, b) => {\n  if (operator === \"+\") return a + b;\n  if (operator === \"-\") return a - b;\n  if (operator === \"*\") return a * b;\n  if (operator === \"/\") {\n    if (b === 0) return;\n    return a / b;\n  }\n};\n\n/**\n * @description RPN を計算\n * @returns 計算結果 or 不適切な入力なら undefined\n */\nexport const calculateRpn: (rpn: string) => number | undefined = (rpn) => {\n  const stack: number[] = [];\n\n  const operators = [\"+\", \"-\", \"*\", \"/\"];\n  const separator = \" \";\n\n  for (const str of rpn.split(separator)) {\n    if (operators.includes(str)) {\n      const b = stack.pop();\n      const a = stack.pop();\n      if (a === undefined || b === undefined) return;\n\n      const result = eval2(a, str, b);\n      if (result === undefined) return;\n\n      stack.push(result);\n    } else {\n      stack.push(Number.parseInt(str));\n    }\n  }\n\n  return stack.pop();\n};\n\n/**\n * @description RPN を中置記法に変換\n * @param \"1 2 + 3 + 4 +\"\n * @returns \"((1+2)+3)+4\"\n */\nexport const rpn2infix: (rpn: string) => string = (rpn) => {\n  const stack: string[] = [];\n\n  const operators = [\"+\", \"-\", \"*\", \"/\"];\n  const separator = \" \";\n\n  for (const str of rpn.split(separator)) {\n    if (operators.includes(str)) {\n      const b = stack.pop();\n      const a = stack.pop();\n      stack.push(\"(\" + a + str + b + \")\");\n    } else {\n      stack.push(str);\n    }\n  }\n\n  const result = stack.pop();\n  if (result === undefined) return \"\";\n  return result.slice(1, -1);\n};\n","import { allCombinations } from \"./combination\";\nimport { calculateRpn, rpn2infix } from \"./rpn\";\n\n/**\n * @description make10 を解き，答えの組み合わせを全て返す\n * @param [\"1\",\"2\",\"3\",\"4\"]\n * @returns [\"((1+2)+3)+4\", ...]\n */\nexport const calculate: (fourDigitsNum: string[]) => string[] = (fourDigitsNum) => {\n  if (fourDigitsNum.length <= 1 || 6 <= fourDigitsNum.length) {\n    throw new Error(\"The length of the argument array must be '2 <= len <= 5'\");\n  }\n\n  const rpns: string[] = allCombinations(fourDigitsNum);\n\n  // 結果が 10 になる RPN 式のみ\n  const rpn10 = rpns.filter((rpn) => {\n    const result = calculateRpn(rpn);\n    if (result === undefined) return false;\n    const TOLERANCE = 10 ** -6;\n    return Math.abs(result - 10) < TOLERANCE;\n  });\n\n  // RPN -> 中置記法 変換\n  const infixes = rpn10.map((rpn) => rpn2infix(rpn));\n\n  return infixes;\n};\n","import { List, ListItem, ListItemText, ListSubheader } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { VFC } from \"react\";\nimport { calculate } from \"../lib/make10/src\";\n\ntype Props = {\n  inputs: string[];\n  isXS?: boolean;\n};\n\nexport const Answer: VFC<Props> = ({ inputs, isXS = true }) => {\n  if (inputs.includes(\"\")) {\n    return <NoAnswer />;\n  }\n\n  const answers = calculate(inputs);\n\n  if (answers.length === 0) {\n    return <NoAnswer />;\n  }\n\n  return (\n    <List\n      sx={{\n        textAlign: \"center\",\n        maxHeight: isXS ? \"22rem\" : \"28rem\",\n        overflow: \"auto\",\n      }}\n      subheader={<li />}\n    >\n      <ListSubheader>found {answers.length} answer(s)</ListSubheader>\n\n      {answers.map((answer, i) => (\n        <ListItem key={i}>\n          <ListItemText primary={answer} sx={{ px: isXS ? \"3rem\" : \"8rem\" }} />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nconst NoAnswer: VFC = () => (\n  <Box sx={{ margin: \"2rem\", textAlign: \"center\", fontFamily: \"'Gill Sans', sans-serif\" }}>no answer</Box>\n);\n","import AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport RemoveCircleIcon from \"@mui/icons-material/RemoveCircle\";\nimport { IconButton } from \"@mui/material\";\nimport { Dispatch, SetStateAction, VFC } from \"react\";\n\ntype Props = {\n  inputs: string[];\n  setInputs: Dispatch<SetStateAction<string[]>>;\n  isXS?: boolean;\n};\n\nexport const DigitDecrement: VFC<Props> = ({ inputs, setInputs, isXS = true }) => {\n  const handleClick = () => {\n    if (inputs.length <= 2) return;\n    setInputs(inputs.slice(0, inputs.length - 1));\n  };\n\n  return (\n    <IconButton onClick={handleClick} size=\"medium\">\n      <RemoveCircleIcon fontSize=\"inherit\" color={inputs.length > 2 ? \"error\" : \"disabled\"} />\n    </IconButton>\n  );\n};\n\nexport const DigitIncrement: VFC<Props> = ({ inputs, setInputs }) => {\n  const handleClick = () => {\n    if (inputs.length >= 5) return;\n    setInputs([...inputs, \"\"]);\n  };\n\n  return (\n    <IconButton onClick={handleClick} size=\"medium\">\n      <AddCircleIcon fontSize=\"inherit\" color={inputs.length < 5 ? \"primary\" : \"disabled\"} />\n    </IconButton>\n  );\n};\n","import { TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { ChangeEvent, Dispatch, SetStateAction, VFC } from \"react\";\n\ntype Props = {\n  inputs: string[];\n  setInputs: Dispatch<SetStateAction<string[]>>;\n  isXS: boolean;\n};\n\nexport const Input: VFC<Props> = ({ inputs, setInputs, isXS }) => {\n  const handleChange = (digit: number, e: ChangeEvent<HTMLInputElement>) => {\n    const val = e.currentTarget.value;\n    if (val.length > 1) return;\n\n    const newInputs = [...inputs];\n    newInputs[digit] = val;\n    setInputs(newInputs);\n  };\n\n  return (\n    <Box\n      sx={{\n        width: isXS ? \"16rem\" : \"28rem\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        gap: isXS ? \"0.2rem\" : \"2rem\",\n      }}\n    >\n      {inputs.map((_, i) => (\n        <TextField\n          key={i}\n          type=\"number\"\n          value={inputs[i]}\n          onChange={handleChange.bind(this, i)}\n          autoFocus={true}\n          sx={{ display: \"block\" }}\n          inputProps={{\n            style: { fontSize: \"1.5rem\", textAlign: \"center\" },\n            className: \"no-spin\",\n          }}\n        />\n      ))}\n    </Box>\n  );\n};\n","import { Card, Container, Grid, Typography } from \"@mui/material\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useState, VFC } from \"react\";\nimport { Answer } from \"./components/Answer\";\nimport { DigitDecrement, DigitIncrement } from \"./components/DigitChanger\";\nimport { Input } from \"./components/Input\";\n\nconst App: VFC = () => {\n  const [inputs, setInputs] = useState<string[]>([\"1\", \"1\", \"5\", \"8\"]);\n  const isXS = useMediaQuery(\"(max-width:600px)\");\n\n  return (\n    <Container sx={{ m: isXS ? \"2rem auto\" : \"1rem auto\", p: 0, fontSize: \"1rem\" }}>\n      <Typography align=\"center\" color=\"#333\" sx={{ fontSize: isXS ? \"1.5rem\" : \"2rem\" }}>\n        Make 10 Puzzle\n      </Typography>\n\n      <Grid\n        container\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        sx={isXS ? { m: \"1rem auto\" } : { m: \"2rem auto\", width: \"40rem\" }}\n      >\n        <DigitDecrement inputs={inputs} setInputs={setInputs} />\n        <Input inputs={inputs} setInputs={setInputs} isXS={isXS} />\n        <DigitIncrement inputs={inputs} setInputs={setInputs} />\n      </Grid>\n\n      <Card sx={{ m: \"0 auto\", boxShadow: 3, width: isXS ? \"16rem\" : \"28rem\" }}>\n        <Answer inputs={inputs} isXS={isXS} />\n      </Card>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./global.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}