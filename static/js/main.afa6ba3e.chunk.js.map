{"version":3,"sources":["lib/make10/src/combination.ts","lib/make10/src/rpn.ts","lib/make10/src/index.ts","components/Answer.tsx","components/DigitChanger.tsx","components/Input.tsx","App.tsx","index.tsx"],"names":["reduceDigits","nums","sep","rpnOperates","a","b","result","num","flags","i","j","list","Array","fill","push","nC2","length","operate","trues","filter","falses","rpn","eval2","operator","calculate","fourDigitsNum","Error","combs","map","comb","flat","ans","from","Set","allCombinations","stack","operators","split","str","includes","pop","undefined","Number","parseInt","calculateRpn","TOLERANCE","Math","abs","slice","rpn2infix","Answer","inputs","answers","List","sx","position","overflow","maxHeight","padding","subheader","ListSubheader","answer","ListItem","ListItemText","primary","NoAnswer","Box","margin","textAlign","DigitDecrement","setInputs","IconButton","onClick","color","size","fontSize","DigitIncrement","Input","handleChange","digit","e","val","currentTarget","value","newInputs","Grid","container","justifyContent","alignItems","width","_","TextField","inputProps","inputMode","pattern","onChange","bind","type","autoFocus","height","App","useState","Container","Typography","variant","align","Card","boxShadow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afa6ba3e.chunk.js","sourcesContent":["/**\n * @description nC2 の，選ばれる組み合わせを true，それ以外を false として返す\n * @param nC2のn\n * @returns [[true,true,false],[true,false,true],[false,true,true]]\n */\nconst nC2: (num: number) => boolean[][] = (num) => {\n  let flags: boolean[][] = [];\n\n  for (let i = 0; i < num - 1; i++) {\n    for (let j = i + 1; j < num; j++) {\n      const list = new Array(num).fill(false);\n      list[i] = list[j] = true;\n      flags.push(list);\n    }\n  }\n\n  return flags;\n};\n\n/**\n * @description n 個の数字から 2 つ選んで n-1 個の数字に\n * @param [\"1\",\"2\",\"3\"]\n * @returns [[\"1 2 + \",\"3\"],[\"1 2 - \",\"3\"],...]\n */\nconst reduceDigits: (nums: string[]) => string[][] = (nums) => {\n  const sep = \" \";\n  const rpnOperates = [\n    (a: string, b: string) => a + sep + b + sep + \"+\",\n    (a: string, b: string) => a + sep + b + sep + \"-\",\n    (a: string, b: string) => b + sep + a + sep + \"-\",\n    (a: string, b: string) => a + sep + b + sep + \"*\",\n    (a: string, b: string) => a + sep + b + sep + \"/\",\n    (a: string, b: string) => b + sep + a + sep + \"/\",\n  ];\n\n  const result: string[][] = [];\n\n  for (const flags of nC2(nums.length)) {\n    for (const operate of rpnOperates) {\n      const trues = nums.filter((num, i) => flags[i]);\n      const falses = nums.filter((num, i) => !flags[i]);\n\n      const rpn = operate(trues[0], trues[1]);\n\n      result.push([rpn, ...falses]);\n    }\n  }\n  return result;\n};\n\n/**\n * @description 演算の全ての組み合わせを RPN で返す\n * @param [\"1\",\"2\",\"3\",\"4\"]\n * @returns [\"1 2 + 3 + 4 +\", ...]\n */\nexport const allCombinations: (nums: string[]) => string[] = (nums) => {\n  let combs = reduceDigits(nums);\n\n  for (let i = 0; i < nums.length - 2; i++) {\n    combs = combs.map((comb) => reduceDigits(comb)).flat();\n  }\n\n  const ans = combs.flat();\n\n  // 重複削除\n  return Array.from(new Set<string>(ans));\n};\n","const eval2: (a: number, operator: string, b: number) => number | undefined = (a, operator, b) => {\n  if (operator === \"+\") return a + b;\n  if (operator === \"-\") return a - b;\n  if (operator === \"*\") return a * b;\n  if (operator === \"/\") {\n    if (b === 0) return;\n    return a / b;\n  }\n};\n\n/**\n * @description RPN を計算\n * @returns 計算結果 or 不適切な入力なら undefined\n */\nexport const calculateRpn: (rpn: string) => number | undefined = (rpn) => {\n  const stack: number[] = [];\n\n  const operators = [\"+\", \"-\", \"*\", \"/\"];\n  const separator = \" \";\n\n  for (const str of rpn.split(separator)) {\n    if (operators.includes(str)) {\n      const b = stack.pop();\n      const a = stack.pop();\n      if (a === undefined || b === undefined) return;\n\n      const result = eval2(a, str, b);\n      if (result === undefined) return;\n\n      stack.push(result);\n    } else {\n      stack.push(Number.parseInt(str));\n    }\n  }\n\n  return stack.pop();\n};\n\n/**\n * @description RPN を中置記法に変換\n * @param \"1 2 + 3 + 4 +\"\n * @returns \"((1+2)+3)+4\"\n */\nexport const rpn2infix: (rpn: string) => string = (rpn) => {\n  const stack: string[] = [];\n\n  const operators = [\"+\", \"-\", \"*\", \"/\"];\n  const separator = \" \";\n\n  for (const str of rpn.split(separator)) {\n    if (operators.includes(str)) {\n      const b = stack.pop();\n      const a = stack.pop();\n      stack.push(\"(\" + a + str + b + \")\");\n    } else {\n      stack.push(str);\n    }\n  }\n\n  const result = stack.pop();\n  if (result === undefined) return \"\";\n  return result.slice(1, -1);\n};\n","import { allCombinations } from \"./combination\";\nimport { calculateRpn, rpn2infix } from \"./rpn\";\n\n/**\n * @description make10 を解き，答えの組み合わせを全て返す\n * @param [\"1\",\"2\",\"3\",\"4\"]\n * @returns [\"((1+2)+3)+4\", ...]\n */\nexport const calculate: (fourDigitsNum: string[]) => string[] = (fourDigitsNum) => {\n  if (fourDigitsNum.length <= 1 || 6 <= fourDigitsNum.length) {\n    throw new Error(\"The length of the argument array must be '2 <= len <= 5'\");\n  }\n\n  const rpns: string[] = allCombinations(fourDigitsNum);\n\n  // 結果が 10 になる RPN 式のみ\n  const rpn10 = rpns.filter((rpn) => {\n    const result = calculateRpn(rpn);\n    if (result === undefined) return false;\n    const TOLERANCE = 10 ** -6;\n    return Math.abs(result - 10) < TOLERANCE;\n  });\n\n  // RPN -> 中置記法 変換\n  const infixes = rpn10.map((rpn) => rpn2infix(rpn));\n\n  return infixes;\n};\n","import { List, ListItem, ListItemText, ListSubheader } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { VFC } from \"react\";\nimport { calculate } from \"../lib/make10/src\";\n\ntype Props = {\n  inputs: string[];\n};\n\nexport const Answer: VFC<Props> = ({ inputs }) => {\n  if (inputs.includes(\"\")) return <NoAnswer />;\n\n  const answers = calculate(inputs);\n\n  if (answers.length === 0) {\n    return <NoAnswer />;\n  }\n\n  return (\n    <List\n      sx={{\n        position: \"relative\",\n        overflow: \"auto\",\n        maxHeight: \"28rem\",\n        padding: \"0 8rem\",\n      }}\n      subheader={<li />}\n    >\n      <ListSubheader>found {answers.length} answers</ListSubheader>\n\n      {answers.map((answer, i) => (\n        <ListItem key={i}>\n          <ListItemText primary={answer} />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nconst NoAnswer: VFC = () => <Box sx={{ margin: \"2rem\", textAlign: \"center\" }}>no answer</Box>;\n","import AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport RemoveCircleIcon from \"@mui/icons-material/RemoveCircle\";\nimport { IconButton } from \"@mui/material\";\nimport { Dispatch, SetStateAction, VFC } from \"react\";\n\ntype Props = {\n  inputs: string[];\n  setInputs: Dispatch<SetStateAction<string[]>>;\n};\n\nexport const DigitDecrement: VFC<Props> = ({ inputs, setInputs }) => {\n  const handleClick = () => {\n    if (inputs.length <= 2) return;\n    setInputs(inputs.slice(0, inputs.length - 1));\n  };\n\n  return (\n    <IconButton onClick={handleClick} color=\"error\" size=\"large\">\n      <RemoveCircleIcon fontSize=\"inherit\" />\n    </IconButton>\n  );\n};\n\nexport const DigitIncrement: VFC<Props> = ({ inputs, setInputs }) => {\n  const handleClick = () => {\n    if (inputs.length >= 5) return;\n    setInputs([...inputs, \"\"]);\n  };\n\n  return (\n    <IconButton onClick={handleClick} color=\"primary\" size=\"large\">\n      <AddCircleIcon fontSize=\"inherit\" />\n    </IconButton>\n  );\n};\n","import { Grid, TextField } from \"@mui/material\";\nimport { ChangeEvent, Dispatch, SetStateAction, VFC } from \"react\";\n\ntype Props = {\n  inputs: string[];\n  setInputs: Dispatch<SetStateAction<string[]>>;\n};\n\nexport const Input: VFC<Props> = ({ inputs, setInputs }) => {\n  const handleChange = (digit: number, e: ChangeEvent<HTMLInputElement>) => {\n    const val = e.currentTarget.value;\n    if (val.length > 1) {\n      return;\n    }\n    const newInputs = inputs.map((num, i) => (i === digit ? val : num));\n    setInputs(newInputs);\n  };\n\n  return (\n    <Grid container justifyContent=\"space-between\" alignItems=\"center\" width=\"28rem\">\n      {Array.from({ length: inputs.length }).map((_, i) => (\n        <TextField\n          key={i}\n          inputProps={{ inputMode: \"numeric\", pattern: \"[0-9]*\" }}\n          value={inputs[i]}\n          onChange={handleChange.bind(this, i)}\n          type=\"number\"\n          autoFocus={i === 0}\n          sx={{ width: `calc(90%/${inputs.length})`, height: \"4rem\", fontSize: \"2rem\" }}\n        />\n      ))}\n    </Grid>\n  );\n};\n","import { Card, Container, Grid, Typography } from \"@mui/material\";\nimport { useState, VFC } from \"react\";\nimport { Answer } from \"./components/Answer\";\nimport { DigitDecrement, DigitIncrement } from \"./components/DigitChanger\";\nimport { Input } from \"./components/Input\";\n\nconst App: VFC = () => {\n  const [inputs, setInputs] = useState<string[]>([\"1\", \"1\", \"5\", \"8\"]);\n\n  return (\n    <Container sx={{ width: \"42rem\", fontSize: \"1rem\", margin: \"2rem auto\" }}>\n      <Typography variant=\"h4\" align=\"center\" sx={{ fontSize: \"2rem\", color: \"#333\" }}>\n        Make10 Puzzle\n      </Typography>\n\n      <Grid container justifyContent=\"space-between\" alignItems=\"center\" sx={{ margin: \"2rem auto\" }}>\n        <DigitDecrement inputs={inputs} setInputs={setInputs} />\n        <Input inputs={inputs} setInputs={setInputs} />\n        <DigitIncrement inputs={inputs} setInputs={setInputs} />\n      </Grid>\n\n      <Card sx={{ boxShadow: 3, width: \"28rem\", margin: \"0 auto\" }}>\n        <Answer inputs={inputs} />\n      </Card>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}